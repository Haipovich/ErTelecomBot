import logging
from aiogram import Router, F, types

from DataBase.models.content_repo import ContentRepository

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞ / FAQ")
async def handle_support_faq(message: types.Message):
    content_repo = ContentRepository()
    content = await content_repo.get_all_content()
    response_lines = ["**–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ):**\n"]
    if content.faqs:
        for faq in content.faqs:
            response_lines.append(f"‚ùì *{faq.question}*\n{faq.answer}\n")
    else:
        response_lines.append("–†–∞–∑–¥–µ–ª FAQ –ø–æ–∫–∞ –ø—É—Å—Ç.\n")

    response_lines.append("\n**–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n")
    if content.hr_contacts:
        response_lines.append("*–û—Ç–¥–µ–ª –ø–æ–¥–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:*")
        for contact in content.hr_contacts:
            response_lines.append(f"- {contact.full_name}: {contact.email}, {contact.phone}")
    if content.company_contacts:
         response_lines.append("\n*–î—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*")
         for contact in content.company_contacts:
             response_lines.append(f"- {contact.department}: {contact.email}, {contact.phone}")

    if not content.hr_contacts and not content.company_contacts:
        response_lines.append("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await message.answer(
        "\n".join(response_lines),
        parse_mode="Markdown"
    )