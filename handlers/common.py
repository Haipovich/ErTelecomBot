import logging
from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from keyboards.reply_keyboards import get_main_menu_keyboard
from DataBase.models.user_repo import UserRepository
from DataBase.models import UserCreate

logger = logging.getLogger(__name__)

router = Router()

@router.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    user_repo = UserRepository()
    logger.info(f"User {user_id} ({user_name}) started the bot.")
    user = await user_repo.get_by_id(user_id)

    if not user:
        logger.info(f"User {user_id} not found in DB. Creating...")
        username = message.from_user.username
        new_user_data = UserCreate(
            id=user_id,
            full_name=user_name,
            email=None,
            phone=None
        )
        created_user = await user_repo.add(new_user_data)
        if created_user:
            logger.info(f"User {user_id} created in DB.")
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É, –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–∫–ª–∏–∫–æ–≤.",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            logger.error(f"Failed to create user {user_id} in DB.")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            )
    else:
        logger.info(f"User {user_id} found in DB.")
        await message.answer(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_main_menu_keyboard()
        )

@router.message()
async def handle_unknown(message: types.Message):
    await message.reply(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        reply_markup=get_main_menu_keyboard()
    )
