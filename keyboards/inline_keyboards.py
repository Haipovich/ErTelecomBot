from typing import List, Dict, Any
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from DataBase.models import User, Job, Activity, Application, JobType, ApplicationStatus # –î–æ–±–∞–≤–∏–ª–∏ User

class JobCallbackData(CallbackData, prefix="job"):
    action: str
    item_id: int

class ActivityCallbackData(CallbackData, prefix="activity"):
    action: str
    item_id: int

class ApplicationCallbackData(CallbackData, prefix="app"):
    action: str
    item_id: int

class ProfileCallbackData(CallbackData, prefix="profile"):
    action: str
    field: str | None = None

def get_list_keyboard(items: List[Job | Activity], data_fabric: type[CallbackData]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for item in items:
        builder.button(text=f"üîé {item.title[:40]}...", callback_data=data_fabric(action="view", item_id=item.id))
    builder.adjust(1)
    return builder.as_markup()

def get_item_details_keyboard(item_id: int, data_fabric: type[CallbackData], already_applied: bool = False) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not already_applied:
         builder.button(text="‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è / –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=data_fabric(action="apply", item_id=item_id))
    else:
         builder.button(text="‚úîÔ∏è –í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å", callback_data="dummy_already_applied")
    builder.adjust(1)
    return builder.as_markup()

def get_my_applications_keyboard(applications: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not applications: return builder.as_markup()
    for app_data in applications:
        app_id = app_data.get('id'); target_title = app_data.get('target_title', '?'); status = app_data.get('status')
        if app_id is None: continue
        status_text = status.value if isinstance(status, ApplicationStatus) else str(status)
        button_text = f"üìÑ {target_title[:35]}... ({status_text})"
        builder.button(text=button_text, callback_data=ApplicationCallbackData(action="view_details", item_id=app_id))
    builder.adjust(1)
    return builder.as_markup()

def get_application_details_keyboard(application: Application) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    deletable_statuses = [ApplicationStatus.PENDING, ApplicationStatus.UNDER_REVIEW]
    if application.status in deletable_statuses:
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=ApplicationCallbackData(action="delete", item_id=application.id))
    builder.button(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data=ApplicationCallbackData(action="back_to_list", item_id=0))
    builder.adjust(1)
    return builder.as_markup()

def get_profile_view_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        callback_data=ProfileCallbackData(action="edit_start")
    )
    return builder.as_markup()

def get_profile_edit_choices_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    fields = {
        "full_name": "–ò–º—è –∏ –§–∞–º–∏–ª–∏—è",
        "email": "Email",
        "phone": "–¢–µ–ª–µ—Ñ–æ–Ω",
        "city": "–ì–æ—Ä–æ–¥",
        "birth_date": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î)",
        "education": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
        "work_experience": "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
        "skills": "–ù–∞–≤—ã–∫–∏",
        "desired_salary": "–ñ–µ–ª–∞–µ–º–∞—è –ó–ü (—á–∏—Å–ª–æ)",
        "desired_employment": "–ñ–µ–ª–∞–µ–º–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å",
        "relocation_readiness": "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–µ–∑–¥—É (–î–∞/–ù–µ—Ç)",
        "about_me": "–û —Å–µ–±–µ",
    }
    for field_key, field_name in fields.items():
         builder.button(
             text=f"üìù {field_name}",
             callback_data=ProfileCallbackData(action="edit_field", field=field_key)
         )

    builder.button(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=ProfileCallbackData(action="edit_cancel")
    )
    builder.adjust(2)
    return builder.as_markup()

def format_job_details(job: Job) -> str:
    details = [ f"*{job.title}*", f"*{'–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞' if job.type == JobType.INTERNSHIP else '–í–∞–∫–∞–Ω—Å–∏—è'}*", "", job.description or "-", "", f"üéì *–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:* {job.required_education or '-'}", f"üõ†Ô∏è *–û–ø—ã—Ç:* {job.required_experience or '-'}", f"üí° *–ù–∞–≤—ã–∫–∏:* {job.required_skills or '-'}", ]
    if job.additional_skills: details.append(f"‚ú® *–î–æ–ø. –Ω–∞–≤—ã–∫–∏:* {job.additional_skills}")
    if job.employment_type: details.append(f"‚è∞ *–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:* {job.employment_type}")
    if job.work_schedule: details.append(f"üìÖ *–ì—Ä–∞—Ñ–∏–∫:* {job.work_schedule}")
    if job.salary:
        try:
            details.append(f"üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* {float(job.salary):.2f} —Ä—É–±.")
        except (ValueError, TypeError):
            details.append(f"üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* {job.salary}")
    if job.additional_info: details.append(f"\n‚ÑπÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:* {job.additional_info}")
    return "\n".join(details)

def format_activity_details(activity: Activity) -> str:
    details = [ f"*{activity.title}*", "", activity.description or "-", "", f"üïí *–ù–∞—á–∞–ª–æ:* {activity.start_time.strftime('%d.%m.%Y %H:%M %Z')}", f"üïí *–û–∫–æ–Ω—á–∞–Ω–∏–µ:* {activity.end_time.strftime('%d.%m.%Y %H:%M %Z')}", f"üìç *–ú–µ—Å—Ç–æ:* {activity.address or '-'}", f"üë• *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {activity.target_audience or '-'}", ]
    return "\n".join(details)

def format_application_details(application: Application, target_details: Job | Activity | None) -> str:
    status_text = application.status.value if isinstance(application.status, ApplicationStatus) else str(application.status)
    details = [ f"**–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ ID: {application.id}**", f"*–°—Ç–∞—Ç—É—Å:* {status_text}", f"*–ü–æ–¥–∞–Ω–∞:* {application.application_time.strftime('%d.%m.%Y %H:%M')}", "" ]
    if application.hr_comment: details.extend([f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π HR:* {application.hr_comment}", ""])
    details.append("**–¶–µ–ª—å –∑–∞—è–≤–∫–∏:**")
    if application.job_id and isinstance(target_details, Job): details.extend([f"*{'–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞' if target_details.type == JobType.INTERNSHIP else '–í–∞–∫–∞–Ω—Å–∏—è'}:* {target_details.title}", f"  _–ù–∞–≤—ã–∫–∏:_ {target_details.required_skills or '-'}"])
    elif application.activity_id and isinstance(target_details, Activity): details.extend([f"*–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {target_details.title}", f"  _–í—Ä–µ–º—è:_ {target_details.start_time.strftime('%d.%m %H:%M')} - {target_details.end_time.strftime('%H:%M')}"])
    else: details.append("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return "\n".join(details)

def format_profile_details(user: User) -> str:
    details = [
        "**üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**",
        f"*ID:* `{user.id}`",
        f"*–ò–º—è:* {user.full_name or '-'}",
        f"*Email:* {user.email or '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}",
        f"*–¢–µ–ª–µ—Ñ–æ–Ω:* {user.phone or '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}",
        f"*–ì–æ—Ä–æ–¥:* {user.city or '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}",
        f"*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* {user.birth_date.strftime('%d.%m.%Y') if user.birth_date else '(–Ω–µ —É–∫–∞–∑–∞–Ω–∞)'}",
        f"*–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:*", f"{user.education or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'}", # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        f"*–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:*", f"{user.work_experience or '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}",
        f"*–ù–∞–≤—ã–∫–∏:*", f"{user.skills or '(–Ω–µ —É–∫–∞–∑–∞–Ω—ã)'}",
        f"*–ñ–µ–ª–∞–µ–º–∞—è –ó–ü:* {f'{user.desired_salary:.2f}' if user.desired_salary else '(–Ω–µ —É–∫–∞–∑–∞–Ω–∞)'}",
        f"*–ñ–µ–ª–∞–µ–º–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å:* {user.desired_employment or '(–Ω–µ —É–∫–∞–∑–∞–Ω–∞)'}",
        f"*–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø–µ—Ä–µ–µ–∑–¥—É:* {'–î–∞' if user.relocation_readiness else '–ù–µ—Ç'}",
        f"*–û —Å–µ–±–µ:*", f"{user.about_me or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'}",
    ]
    return "\n".join(d for d in details if d is not None)